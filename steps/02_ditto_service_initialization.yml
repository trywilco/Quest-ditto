id: ditto_service_initialization
learningObjectives:
  - Implement the getPlanets flow in DittoServiceImp
hints:
  - Look at the DittoServiceImp class in the com.ditto.guides.services package
  - The getPlanets method should query non-archived planets and order them by distance from the sun
startFlow:
  do:
    - actionId: bot_message
      params:
        person: lucca
        messages:
          - text: I've prepared a `DittoServiceImp` class with all the necessary methods we'll need.
              Let's implement them one by one, starting with the `getPlanets` flow.
          - text: Take a look at the DittoServiceImp class in the services package. You'll see
              that it already has the structure set up, including comments explaining what
              each method should do. Let's focus on implementing the getPlanets method first.
          - text: Once you've implemented getPlanets, create a pull request so we can check
              your implementation before moving on to the other methods. Remember, we want
              to query only non-archived planets and order them by their distance from the sun.
    - actionId: ready_message
      params:
        person: lucca
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    do:
      - actionId: github_pr_review
        params:
          solution: |
            The getPlanets implementation should:
            1. Register a Ditto observer
            2. Use DQL query
            3. Pass isArchived parameter as false
            4. Transform results to convert to Planet objects
            6. Include proper cleanup in awaitClose
            
            Expected code structure (it shouldn't be exactly the same, just an example):
            ```kotlin
            ditto?.let {
              planetObserver = it.store.registerObserver(
                """
                SELECT *
                FROM planets
                WHERE isArchived = :isArchived
                ORDER BY orderFromSun
                """,
                mapOf("isArchived" to false)
              ) { results ->
                val planets = results.items.map { item ->
                  Planet.fromMap(item.value)
                }
                trySend(planets)
              }
            }

            awaitClose {
              planetObserver?.close()
              planetObserver = null
            }
            ```
          messages:
            person: lucca
    switch:
      key: ${{eventType}}
      cases:
        github_pr_merged:
          do:
            - actionId: finish_step
